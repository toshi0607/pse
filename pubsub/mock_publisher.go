// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub/publisher.go

// Package pubsub is a generated GoMock package.
package pubsub

import (
	pubsub "cloud.google.com/go/pubsub"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// CreateTopic mocks base method
func (m *MockPublisher) CreateTopic(ctx context.Context, topicID string) (*pubsub.Topic, error) {
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topicID)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockPublisherMockRecorder) CreateTopic(ctx, topicID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockPublisher)(nil).CreateTopic), ctx, topicID)
}

// DeleteTopic mocks base method
func (m *MockPublisher) DeleteTopic(ctx context.Context, topicID string) error {
	ret := m.ctrl.Call(m, "DeleteTopic", ctx, topicID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopic indicates an expected call of DeleteTopic
func (mr *MockPublisherMockRecorder) DeleteTopic(ctx, topicID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockPublisher)(nil).DeleteTopic), ctx, topicID)
}

// PublishSampleMessage mocks base method
func (m *MockPublisher) PublishSampleMessage(ctx context.Context, topicID string) error {
	ret := m.ctrl.Call(m, "PublishSampleMessage", ctx, topicID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSampleMessage indicates an expected call of PublishSampleMessage
func (mr *MockPublisherMockRecorder) PublishSampleMessage(ctx, topicID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSampleMessage", reflect.TypeOf((*MockPublisher)(nil).PublishSampleMessage), ctx, topicID)
}

// Init mocks base method
func (m *MockPublisher) Init(ctx context.Context, projectID string) error {
	ret := m.ctrl.Call(m, "Init", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockPublisherMockRecorder) Init(ctx, projectID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockPublisher)(nil).Init), ctx, projectID)
}
